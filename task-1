import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.URL;
import java.net.HttpURLConnection;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class VulnerabilityScanner {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter a target (IP address or website):");
        String target = scanner.nextLine();

        System.out.println("Scanning open ports...");
        scanOpenPorts(target);

        System.out.println("Checking HTTP headers for vulnerabilities...");
        checkHttpHeaders(target);

        scanner.close();
    }

    // Scans for open ports in the range 1-1024
    public static void scanOpenPorts(String target) {
        List<Integer> openPorts = new ArrayList<>();

        for (int port = 1; port <= 1024; port++) {
            try (Socket socket = new Socket()) {
                socket.connect(new InetSocketAddress(target, port), 200);
                openPorts.add(port);
            } catch (IOException ignored) {
            }
        }

        if (openPorts.isEmpty()) {
            System.out.println("No open ports found.");
        } else {
            System.out.println("Open ports: " + openPorts);
        }
    }

    // Checks HTTP headers for outdated software versions and misconfigurations
    public static void checkHttpHeaders(String target) {
        try {
            if (!target.startsWith("http://") && !target.startsWith("https://")) {
                target = "http://" + target;
            }

            URL url = new URL(target);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.connect();

            // Print response headers
            System.out.println("HTTP Headers:");
            connection.getHeaderFields().forEach((key, value) -> {
                System.out.println(key + ": " + value);

                // Check for outdated software indicators
                if (key != null && key.equalsIgnoreCase("Server")) {
                    String serverHeader = value.toString();
                    if (serverHeader.toLowerCase().contains("apache/2.2") ||
                        serverHeader.toLowerCase().contains("nginx/1.0")) {
                        System.out.println("[Warning] Outdated server software detected: " + serverHeader);
                    }
                }

                // Check for misconfigurations (e.g., exposing sensitive headers)
                if (key != null && (key.equalsIgnoreCase("X-Powered-By") || key.equalsIgnoreCase("X-AspNet-Version"))) {
                    System.out.println("[Warning] Potential misconfiguration detected: " + key + " header is exposed.");
                }
            });

        } catch (IOException e) {
            System.out.println("Unable to connect to the target: " + e.getMessage());
        }
    }
}
